class BinaryClassificationModel(nn.Module):
    def __init__(self, input_size, hidden_size):
        super(BinaryClassificationModel, self).__init__()
        self.linear = nn.Linear(input_size, hidden_size)
        self.hidden = nn.Linear(hidden_size, hidden_size)
        self.batch_norm = nn.BatchNorm1d(hidden_size)
        self.output = nn.Linear(hidden_size, 1)

    def forward(self, x):
        x = self.linear(x)
        x = self.batch_norm(x)
        x = torch.relu(x)
        x = self.hidden(x)
        x = self.batch_norm(x)
        x = torch.relu(x)
        x = self.output(x)

        return torch.sigmoid(x)

parameters = { 
    'batch_size': [4, 8, 16, 32, 64],
    'hidden_size': [8, 16, 32, 64],
    'lr': [0.0005, 0.0003, 0.0001]
}

Best Parameters: {'batch_size': 64, 'hidden_size': 64, 'lr': 0.0003}
Best Test Accuracy: 0.7286501526832581
Best Performance history {'running_loss': 0.5626606941223145, 'running_binary_acc': 0.7388124465942383, 'loss': 0.5636348724365234, 'binary_acc': 0.7372413873672485, 'val_loss': 0.5745119452476501, 'val_binary_acc': 0.7544828057289124, 'train_steps': 91, 'validation_steps': 12, 'test_loss': 0.5896424055099487, 'test_binary_acc': 0.7286501526832581}
